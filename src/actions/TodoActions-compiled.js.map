{"version":3,"sources":["TodoActions.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAM,eAAe,CACb,EAAC,IAAI,IAAL,EAAW,MAAM,YAAjB,EADa,EAEb,EAAC,IAAI,IAAL,EAAW,MAAM,aAAjB,EAFa,EAGb,EAAC,IAAI,IAAL,EAAW,MAAM,iBAAjB,EAHa,EAIb,EAAC,IAAI,IAAL,EAAW,MAAM,KAAjB,EAJa,CAArB;;AAOA,IAAM,cAAc;AAChB,YADgB,sBACL;AACP,eAAO;AACH,kBAAM,WADH;AAEH,mBAAO;AAFJ,SAAP;AAIH,KANe;AAOhB,WAPgB,mBAOR,IAPQ,EAOF;AACV,eAAO;AACH,kBAAM,UADH;AAEH;AAFG,SAAP;AAIH,KAZe;AAahB,YAbgB,oBAaP,EAbO,EAaH;AACT,eAAO;AACH,kBAAM,WADH;AAEH;AAFG,SAAP;AAIH,KAlBe;AAmBhB,YAnBgB,oBAmBP,EAnBO,EAmBH,OAnBG,EAmBM;AAClB,eAAO;AACH,kBAAM,WADH;AAEH,kBAFG;AAGH;AAHG,SAAP;AAKH,KAzBe;AA0BhB,kBA1BgB,4BA0BC;AACb,eAAO;AACH,kBAAM;AADH,SAAP;AAGH,KA9Be;AA+BhB,cA/BgB,sBA+BL,EA/BK,EA+BD;AACX,eAAO;AACH,kBAAM,aADH;AAEH;AAFG,SAAP;AAIH,KApCe;AAqChB,aArCgB,uBAqCJ;AACR,eAAO;AACH,kBAAM;AADH,SAAP;AAGH,KAzCe;AA0ChB,cA1CgB,sBA0CL,EA1CK,EA0CD;AACX,eAAO;AACH,kBAAM,aADH;AAEH;AAFG,SAAP;AAIH,KA/Ce;AAgDhB,mBAhDgB,6BAgDE;AACd,eAAO;AACH,kBAAM;AADH,SAAP;AAGH;AApDe,CAApB;;eAuDe,W;;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;kCAtHM,Y;;kCAOA,W","file":"TodoActions-compiled.js","sourcesContent":["// handleAddTodo,\n// handleEditTodo,\n//     handleSaveTodo,\n//     handleCancelEditTodo,\n//     handleDeleteTodo,\n//     handleToggleAll,\n//     handleToggleTodo,\n//     handleDeleteCompleted\n\nconst initialTodos = [\n        {id: 1000, text: '치킨에 맥주 한 잔'},\n        {id: 1001, text: '삼겹살에 소주 한 잔'},\n        {id: 1002, text: '리코타샐러드에 봉골레 파스타'},\n        {id: 1003, text: '떡순튀'}\n    ];\n\nconst TodoActions = {\n    getTodos() {\n        return {\n            type: 'GET_TODOS',\n            todos: initialTodos\n        }\n    },\n    addTodo(text) {\n        return {\n            type: 'ADD_TODO',\n            text\n        }\n    },\n    editTodo(id) {\n        return {\n            type: 'EDIT_TODO',\n            id\n        }\n    },\n    saveTodo(id, newText) {\n        return {\n            type: 'SAVE_TODO',\n            id,\n            newText\n        }\n    },\n    cancelEditTodo() {\n        return {\n            type: 'CANCEL_EDIT_TODO'\n        }\n    },\n    deleteTodo(id) {\n        return {\n            type: 'DELETE_TODO',\n            id\n        }\n    },\n    toggleAll() {\n        return {\n            type: 'TOGGLE_ALL'\n        }\n    },\n    toggleTodo(id) {\n        return {\n            type: 'TOGGLE_TODO',\n            id\n        }\n    },\n    deleteCompleted() {\n        return {\n            type: 'DELETE_COMPLETED'\n        }\n    }\n}\n\nexport default TodoActions;\n\n// handleDeleteCompleted() {\n//     const newTodos = this.state.todos.filter(v=> !v.done);\n//     this.setState({ todos: newTodos });\n// }\n// handleAddTodo(text) {\n//     this.setState({\n//         todos: [ ...this.state.todos, {\n//             id: generateUId(),\n//             text\n//         }]\n//     });\n// }\n// handleDeleteTodo(id) {\n//     const newTodos = [...this.state.todos];\n//     const deleteIndex = newTodos.findIndex(v => v.id === id);\n//     newTodos.splice(deleteIndex, 1);\n//     this.setState({ todos: newTodos });\n// }\n// handleEditTodo(id) {\n//     this.setState({\n//         editing: id\n//     });\n// }\n// handleSaveTodo(id, newText) {\n//     const newTodos = [...this.state.todos];\n//     const editIndex = newTodos.findIndex(v => v.id === id);\n//     newTodos[editIndex].text = newText;\n//     this.setState({\n//         todos: newTodos,\n//         editing: null\n//     });\n// }\n// handleCancelEditTodo() {\n//     this.setState({\n//         editing: null\n//     });\n// }\n// handleToggleAll() {\n//     const newToggleAll = !this.state.todos.every(v => v.done);\n//     const newTodos = this.state.todos.map(v => {\n//         v.done = newToggleAll;\n//         return v;\n//     });\n//     this.setState({\n//         todos: newTodos\n//     });\n// }\n// handleToggleTodo(id) {\n//     const newTodos = [...this.state.todos];\n//     const editIndex = newTodos.findIndex(v => v.id === id);\n//     newTodos[editIndex].done = !newTodos[editIndex].done;\n//     this.setState({\n//         todos: newTodos\n//     });\n// }"]}